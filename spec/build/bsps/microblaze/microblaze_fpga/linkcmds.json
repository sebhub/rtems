{
  "SPDX-License-Identifier": "CC-BY-SA-4.0 OR BSD-2-Clause",
  "build-type": "config-file",
  "content": "/* SPDX-License-Identifier: BSD-2-Clause */\n\n/*\n * Copyright (C) 2021 On-Line Applications Research Corporation (OAR)\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\nENTRY (_start)\nSTARTUP (start.o)\n_TEXT_START_ADDR = DEFINED(_TEXT_START_ADDR) ? _TEXT_START_ADDR : 0x80000000;\n\nMEMORY\n  {\n      BRAM     (AIW) : ORIGIN = 0x00000000, LENGTH = 0x10000\n      RAM   : ORIGIN = _TEXT_START_ADDR, LENGTH = ${BSP_MICROBLAZE_FPGA_RAM_LENGTH}\n  }\n\nREGION_ALIAS (\"REGION_START\", BRAM);\nREGION_ALIAS (\"REGION_VECTOR\", BRAM);\nREGION_ALIAS (\"REGION_TEXT\", RAM);\nREGION_ALIAS (\"REGION_TEXT_LOAD\", RAM);\nREGION_ALIAS (\"REGION_RODATA\", RAM);\nREGION_ALIAS (\"REGION_RODATA_LOAD\", RAM);\nREGION_ALIAS (\"REGION_DATA\", RAM);\nREGION_ALIAS (\"REGION_DATA_LOAD\", RAM);\nREGION_ALIAS (\"REGION_FAST_DATA\", RAM);\nREGION_ALIAS (\"REGION_FAST_DATA_LOAD\", RAM);\nREGION_ALIAS (\"REGION_BSS\", RAM);\nREGION_ALIAS (\"REGION_WORK\", RAM);\nREGION_ALIAS (\"REGION_STACK\", RAM);\n\nSECTIONS\n{\n  .vectors.reset 0x0 : { KEEP (*(.vectors.reset)) } = 0\n  .vectors.sw_exception 0x8 : { KEEP (*(.vectors.sw_exception)) } = 0\n  .vectors.interrupt 0x10 : { KEEP (*(.vectors.interrupt)) } = 0\n  .vectors.debug_sw_break 0x18 : { KEEP (*(.vectors.debug_sw_break)) } = 0\n  .vectors.hw_exception 0x20 : { KEEP (*(.vectors.hw_exception)) } = 0\n  . = _TEXT_START_ADDR;\n  .text : ALIGN_WITH_INPUT {\n    bsp_section_text_begin = .;\n    *(.text.unlikely .text.*_unlikely)\n    *(.text .stub .text.* .gnu.linkonce.t.*)\n    /* .gnu.warning sections are handled specially by elf32.em.  */\n    *(.gnu.warning)\n    *(.glue_7t) *(.glue_7) *(.vfp11_veneer) *(.v4_bx)\n  } > REGION_TEXT AT > REGION_TEXT_LOAD\n  .init : ALIGN_WITH_INPUT {\n    KEEP (*(.init))\n  } > REGION_TEXT AT > REGION_TEXT_LOAD\n  .fini : ALIGN_WITH_INPUT {\n    KEEP (*(.fini))\n\n    /*\n    * If requested, align the size of the combined start and text\n    * section to the next power of two to meet MPU region\n    * alignment requirements.\n    */\n    . = DEFINED (bsp_align_text_and_rodata_end_to_power_of_2) ?\n        bsp_section_start_begin\n        + ALIGN (. - bsp_section_start_begin,\n        1 << LOG2CEIL (. - bsp_section_start_begin)) : .;\n\n    bsp_section_text_end = .;\n  } > REGION_TEXT AT > REGION_TEXT_LOAD\n  bsp_section_text_size = bsp_section_text_end - bsp_section_text_begin;\n  bsp_section_text_load_begin = LOADADDR (.text);\n  bsp_section_text_load_end = bsp_section_text_load_begin + bsp_section_text_size;\n\n  . = ALIGN(4);\n\n  /* Added to handle pic code */\n  .got : {\n    *(.got)\n  } > REGION_RODATA AT > REGION_RODATA_LOAD\n  .got1 : {\n    *(.got1)\n  } > REGION_RODATA AT > REGION_RODATA_LOAD\n  .got2 : {\n    *(.got2)\n  } > REGION_RODATA AT > REGION_RODATA_LOAD\n\n  _frodata = . ;\n  .rodata : {\n    *(.rodata)\n    *(.rodata.*)\n    *(.gnu.linkonce.r.*)\n    CONSTRUCTORS; /* Is this needed? */\n  } > REGION_RODATA AT > REGION_RODATA_LOAD\n  _erodata = .;\n  .eh_frame : {\n    *(.eh_frame)\n  } > REGION_RODATA AT > REGION_RODATA_LOAD\n  .jcr : {\n    *(.jcr)\n  } > REGION_RODATA AT > REGION_RODATA_LOAD\n  .gcc_except_table : {\n    *(.gcc_except_table)\n  } > REGION_RODATA AT > REGION_RODATA_LOAD\n  .tdata : ALIGN_WITH_INPUT {\n    _TLS_Data_begin = .;\n    *(.tdata .tdata.* .gnu.linkonce.td.*)\n    _TLS_Data_end = .;\n  } > REGION_RODATA AT > REGION_RODATA_LOAD\n  .tbss : ALIGN_WITH_INPUT {\n    _TLS_BSS_begin = .;\n    *(.tbss .tbss.* .gnu.linkonce.tb.*) *(.tcommon)\n    _TLS_BSS_end = .;\n  } > REGION_RODATA AT > REGION_RODATA_LOAD\n  _TLS_Data_size = _TLS_Data_end - _TLS_Data_begin;\n  _TLS_Data_begin = _TLS_Data_size != 0 ? _TLS_Data_begin : _TLS_BSS_begin;\n  _TLS_Data_end = _TLS_Data_size != 0 ? _TLS_Data_end : _TLS_BSS_begin;\n  _TLS_BSS_size = _TLS_BSS_end - _TLS_BSS_begin;\n  _TLS_Size = _TLS_BSS_end - _TLS_Data_begin;\n  _TLS_Alignment = MAX (ALIGNOF (.tdata), ALIGNOF (.tbss));\n\n  .ctors : {\n    _dummy_symbol__ = .;\n    __CTOR_LIST__ = .;\n    ___CTORS_LIST___ = .;\n    KEEP (*crtbegin.o(.ctors))\n    KEEP (*(EXCLUDE_FILE(*crtend.o) .ctors))\n    KEEP (*(SORT(.ctors.*)))\n    KEEP (*(.ctors*))\n    __CTOR_END__ = .;\n    ___CTORS_END___ = .;\n  } > REGION_RODATA AT > REGION_RODATA_LOAD\n  .dtors : {\n    __DTOR_LIST__ = .;\n    ___DTORS_LIST___ = .;\n    KEEP (*crtbegin.o(.dtors))\n    KEEP (*(EXCLUDE_FILE(*crtend.o) .dtors))\n    KEEP (*(SORT(.dtors.*)))\n    KEEP (*(.dtors))\n    PROVIDE(__DTOR_END__ = .);\n    PROVIDE(___DTORS_END___ = .);\n  } > REGION_RODATA AT > REGION_RODATA_LOAD\n  .rtemsroset : {\n    /* Special FreeBSD linker set sections */\n    __start_set_sysctl_set = .;\n    *(set_sysctl_*);\n    __stop_set_sysctl_set = .;\n    *(set_domain_*);\n    *(set_pseudo_*);\n\n    KEEP (*(SORT(.rtemsroset.*)))\n    bsp_section_rodata_end = .;\n  } > REGION_RODATA AT > REGION_RODATA_LOAD\n\n  .data : ALIGN_WITH_INPUT {\n    bsp_section_data_begin = .;\n    *(.data .data.* .gnu.linkonce.d.*)\n    SORT(CONSTRUCTORS)\n  } > REGION_DATA AT > REGION_DATA_LOAD\n  .data1 : ALIGN_WITH_INPUT {\n    *(.data1)\n  } > REGION_DATA AT > REGION_DATA_LOAD\n  .rtemsrwset : ALIGN_WITH_INPUT {\n    KEEP (*(SORT(.rtemsrwset.*)))\n    bsp_section_data_end = .;\n  } > REGION_DATA AT > REGION_DATA_LOAD\n  bsp_section_data_size = bsp_section_data_end - bsp_section_data_begin;\n  bsp_section_data_load_begin = LOADADDR (.data);\n  bsp_section_data_load_end = bsp_section_data_load_begin + bsp_section_data_size;\n\n  .bss : ALIGN_WITH_INPUT {\n    bsp_section_bss_begin = .;\n    *(.dynbss)\n    *(.bss .bss.* .gnu.linkonce.b.*)\n    *(COMMON)\n    bsp_section_bss_end = .;\n  } > REGION_BSS AT > REGION_BSS\n  bsp_section_bss_size = bsp_section_bss_end - bsp_section_bss_begin;\n\n  . = ALIGN(8);\n\n  .rtemsstack (NOLOAD) : ALIGN_WITH_INPUT {\n    bsp_section_rtemsstack_begin = .;\n    *(SORT_BY_ALIGNMENT (SORT_BY_NAME (.rtemsstack*)))\n    bsp_section_rtemsstack_end = .;\n  } > REGION_WORK AT > REGION_WORK\n  bsp_section_rtemsstack_size = bsp_section_rtemsstack_end - bsp_section_rtemsstack_begin;\n\n  .work : ALIGN_WITH_INPUT {\n    /*\n    * The work section will occupy the remaining REGION_WORK region and\n    * contains the RTEMS work space and heap.\n    */\n    bsp_section_work_begin = .;\n    . += ORIGIN (REGION_WORK) + LENGTH (REGION_WORK) - ABSOLUTE (.);\n    bsp_section_work_end = .;\n  } > REGION_WORK AT > REGION_WORK\n  bsp_section_work_size = bsp_section_work_end - bsp_section_work_begin;\n\n  .stack : ALIGN_WITH_INPUT {\n    /*\n    * The stack section will occupy the remaining REGION_STACK region and may\n    * contain the task stacks.  Depending on the region distribution this\n    * section may be of zero size.\n    */\n    bsp_section_stack_begin = .;\n    . += ORIGIN (REGION_STACK) + LENGTH (REGION_STACK) - ABSOLUTE (.);\n    bsp_section_stack_end = .;\n  } > REGION_STACK AT > REGION_STACK\n  bsp_section_stack_size = bsp_section_stack_end - bsp_section_stack_begin;\n\n  RamBase = ORIGIN (REGION_WORK);\n  RamSize = LENGTH (REGION_WORK);\n  RamEnd = RamBase + RamSize;\n  WorkAreaBase = bsp_section_work_begin;\n  HeapSize = 0;\n}\n",
  "copyrights": [
    "Copyright (C) 2021 On-Line Applications Research Corporation (OAR)"
  ],
  "enabled-by": true,
  "install-path": "${BSP_LIBDIR}",
  "links": [],
  "target": "linkcmds",
  "type": "build"
}