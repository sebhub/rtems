{
  "SPDX-License-Identifier": "CC-BY-SA-4.0 OR BSD-2-Clause",
  "build-type": "config-file",
  "content": "/* SPDX-License-Identifier: BSD-2-Clause */\n\n/*\n * Copyright (C) 2021 Gedare Bloom <gedare@rtems.org>\n * Copyright (C) 2022 Chris Johns <chrisj@rtems.org>\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n\n/*\n * The RAM supports 32G of DDR4 or LPDDR memory using DDRMC0.\n *\n * The DDR Conroller (DDRC) has two regions R0 and R1. R0 is\n * in the A32 address space and R1 is in the A64 address space.\n */\nDDRMC0_REGION_0_BASE = 0x00000000000;\nDDRMC0_REGION_0_LENGTH = 0x00080000000;\nDDRMC0_REGION_1_BASE = 0x00800000000;\nDDRMC0_REGION_1_LENGTH = 0x01000000000;\n\nBSP_RAM_BASE = ${BSP_XILINX_VERSAL_RAM_BASE};\n\nBSP_R0_RAM_BASE = DDRMC0_REGION_0_BASE;\nBSP_R0_RAM_LENGTH =\n   ${BSP_XILINX_VERSAL_RAM_LENGTH} >= DDRMC0_REGION_0_LENGTH ?\n       DDRMC0_REGION_0_LENGTH - BSP_RAM_BASE : ${BSP_XILINX_VERSAL_RAM_LENGTH};\nBSP_R0_RAM_END = BSP_RAM_BASE + BSP_R0_RAM_LENGTH;\n\nBSP_R1_RAM_BASE = DDRMC0_REGION_1_BASE;\nBSP_R1_RAM_LENGTH =\n   ${BSP_XILINX_VERSAL_RAM_LENGTH} >= DDRMC0_REGION_0_LENGTH ?\n       ${BSP_XILINX_VERSAL_RAM_LENGTH} - DDRMC0_REGION_0_LENGTH : 0;\n\nAARCH64_MMU_TT_PAGES_SIZE = 0x1000 * ${AARCH64_MMU_TRANSLATION_TABLE_PAGES};\n\nMEMORY {\n  RAM       : ORIGIN = BSP_RAM_BASE + ${BSP_XILINX_VERSAL_LOAD_OFFSET},\n              LENGTH = BSP_R0_RAM_LENGTH - ${BSP_XILINX_VERSAL_LOAD_OFFSET} - ${BSP_XILINX_VERSAL_NOCACHE_LENGTH} - AARCH64_MMU_TT_PAGES_SIZE\n  RAM1      : ORIGIN = BSP_R1_RAM_BASE,\n              LENGTH = BSP_R1_RAM_LENGTH\n  NOCACHE   : ORIGIN = BSP_RAM_BASE + BSP_R0_RAM_LENGTH - AARCH64_MMU_TT_PAGES_SIZE - ${BSP_XILINX_VERSAL_NOCACHE_LENGTH},\n              LENGTH = ${BSP_XILINX_VERSAL_NOCACHE_LENGTH}\n  RAM_MMU   : ORIGIN = BSP_R0_RAM_END - AARCH64_MMU_TT_PAGES_SIZE,\n              LENGTH = AARCH64_MMU_TT_PAGES_SIZE\n}\n\nREGION_ALIAS (\"REGION_START\",          RAM);\nREGION_ALIAS (\"REGION_VECTOR\",         RAM);\nREGION_ALIAS (\"REGION_TEXT\",           RAM);\nREGION_ALIAS (\"REGION_TEXT_LOAD\",      RAM);\nREGION_ALIAS (\"REGION_RODATA\",         RAM);\nREGION_ALIAS (\"REGION_RODATA_LOAD\",    RAM);\nREGION_ALIAS (\"REGION_DATA\",           RAM);\nREGION_ALIAS (\"REGION_DATA_LOAD\",      RAM);\nREGION_ALIAS (\"REGION_FAST_TEXT\",      RAM);\nREGION_ALIAS (\"REGION_FAST_TEXT_LOAD\", RAM);\nREGION_ALIAS (\"REGION_FAST_DATA\",      RAM);\nREGION_ALIAS (\"REGION_FAST_DATA_LOAD\", RAM);\nREGION_ALIAS (\"REGION_BSS\",            RAM);\nREGION_ALIAS (\"REGION_WORK\",           RAM);\nREGION_ALIAS (\"REGION_STACK\",          RAM);\nREGION_ALIAS (\"REGION_NOCACHE\",        NOCACHE);\nREGION_ALIAS (\"REGION_NOCACHE_LOAD\",   NOCACHE);\n\nbsp_stack_exception_size = DEFINED (bsp_stack_exception_size) ? bsp_stack_exception_size : 1024;\n\nbsp_section_rwbarrier_align = DEFINED (bsp_section_rwbarrier_align) ? bsp_section_rwbarrier_align : 1M;\n\nbsp_vector_table_in_start_section = 1;\n\nbsp_r0_ram_base = DDRMC0_REGION_0_BASE;\nbsp_r0_ram_end = ORIGIN (RAM) + LENGTH (RAM);\nbsp_r1_ram_base = ORIGIN (RAM1);\nbsp_r1_ram_end = ORIGIN (RAM1) + LENGTH (RAM1);\n\nbsp_translation_table_base = ORIGIN (RAM_MMU);\nbsp_translation_table_end = ORIGIN (RAM_MMU) + LENGTH (RAM_MMU);\n\nOUTPUT_FORMAT (\"elf64-littleaarch64\")\nOUTPUT_ARCH (aarch64)\n\nINCLUDE linkcmds.base\n",
  "copyrights": [
    "Copyright (C) 2021 Gedare Bloom <gedare@rtems.org>",
    "Copyright (C) 2022 Chris Johns <chrisj@rtems.org>"
  ],
  "enabled-by": true,
  "install-path": "${BSP_LIBDIR}",
  "links": [],
  "target": "linkcmds",
  "type": "build"
}